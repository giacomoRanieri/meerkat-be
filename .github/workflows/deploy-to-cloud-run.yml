# .github/workflows/deploy-to-cloud-run.yml

# Name of the workflow, which will be displayed in the GitHub Actions UI.
name: Build and Deploy to Cloud Run (PROD)

# Controls when the workflow will run.
on:

  # Allows you to run this workflow manually from the Actions tab or to be called from another workflow.
  workflow_dispatch:
    # Defines input parameters for manual runs.
    inputs:
      version:
        description: 'The version tag to build and deploy (e.g., v1.2.3)'
        required: true
        type: string

# Environment variables available to all jobs in this workflow.
env:
  # The name of your Cloud Run service.
  SERVICE_NAME: ${{ vars.SERVICE_NAME }} # <-- TODO: Change this to your service name

jobs:
  deploy:
    # Specifies that this job runs in the "PROD" environment.
    # You can configure protection rules and environment-specific secrets for "PROD"
    # in your repository settings under Settings > Environments.
    environment: PROD

    env:
      # Your Google Cloud Project ID.
      PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      # The Google Cloud region where your service is deployed.
      REGION: ${{ vars.REGION }}
      # The JSON key of the Google Cloud service account.
      GCP_SA_KEY: ${{ secrets.GCP_SA_KEY }}


    # Specifies the environment on which this job will run.
    # `ubuntu-latest` is a recent version of the Ubuntu operating system.
    runs-on: ubuntu-latest

    # Granting permissions for the Google Auth action to work correctly.
    permissions:
      contents: 'read'
      id-token: 'write'

    steps:

      # Step 1: Determine the version string.
      # This step uses the version provided in the manual input.
      # It checks if the tag exists in the remote repository.
      - name: Determine Version
        id: get_version
        run: |
          # Use the version provided in the manual input.
          VERSION="${{ github.event.inputs.version }}"
          echo "Using provided version: $VERSION"

          if git ls-remote --tags ${{github.repositoryUrl}} | grep "refs/tags/$VERSION"; then
            # Set the determined version as an environment variable for subsequent steps.
            echo "deploy_version=${VERSION#v}" >> $GITHUB_OUTPUT
          else
            echo "Tag '$VERSION' not found on repository."
            exit 1
          fi



      # Step 2: Check out the repository's code.
      - name: Checkout repository
        id: checkout
        uses: actions/checkout@v4
        with:
          # `ref: ` is required to fetch the latest tag.
          ref: "v${{ steps.get_version.outputs.deploy_version }}"
          # `fetch-depth: 0` is required to fetch all history and tags.
          fetch-depth: 0

      # Step 3: Authenticate to Google Cloud.
      # This action uses Workload Identity Federation to securely authenticate.
      - name: Authenticate to Google Cloud
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          # The JSON key of the Google Cloud service account.
          credentials_json: ${{ env.GCP_SA_KEY }}
          # The project_id on Google Cloud.
          project_id: ${{ env.PROJECT_ID }}

      # Step 4: Set up Docker to use Google Cloud credentials
      - name: Configure Docker to use gcloud
        run: |
          gcloud auth configure-docker ${{ env.REGION }}-docker.pkg.dev 

      
      # Step 5: Build and tag the Docker image
      - name: Build and Push Docker Image
        id: build
        run: |
          # Build the Docker image using the Dockerfile in the current directory.
          # The image is tagged with the region, project ID, service name, and version.
          IMAGE_TAG="${{ env.REGION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/meerkat/${{ env.SERVICE_NAME }}:${{ steps.get_version.outputs.deploy_version }}"
          # The `--progress quiet` option reduces output noise during the build.
          docker build . --tag "${IMAGE_TAG}" --progress quiet
          # Push the Docker image to Google Container Registry.
          docker push "${IMAGE_TAG}" --quiet
          # Set the image tag as an output variable for later steps.
          echo "image_tag=$IMAGE_TAG" >> $GITHUB_OUTPUT
      
      # Step 6: Build and Deploy to Cloud Run.
      # This action handles deploying to Cloud Run service.
      - name: Deploy to Cloud Run
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v2'
        with:
          # The service name to deploy.
          service: ${{ env.SERVICE_NAME }}
          # The Google Cloud project ID where the service is deployed.
          project_id: ${{ env.PROJECT_ID }}
          # The region where the service is deployed.
          region: ${{ env.REGION }}
          # The Docker image to deploy.
          image: ${{steps.build.outputs.image_tag}}
        # Deployment traffic settings.
        # This configuration sends 100% of traffic to the newly deployed revision.
        # You can also use `tag` to route traffic based on tags.
        # traffic:
        #   percent: 100
        #   to:
        #     - LATEST

      # Step 7: Output the URL of the deployed service.
      - name: Show Deployed URL
        run: echo "Successfully deployed to ${{ steps.deploy.outputs.url }}"

